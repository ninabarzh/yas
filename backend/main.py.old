import json
import logging

# For using .env in development
import os
from dotenv import load_dotenv

from meilisearch import Client
from starlette.applications import Starlette
from starlette.middleware.cors import CORSMiddleware
from starlette.requests import Request
from starlette.responses import JSONResponse, PlainTextResponse
from starlette.routing import Route

# Load environment variables from .env file
load_dotenv()

# Initialize MeiliSearch client
meili_client = Client(
    os.getenv("MEILI_SEARCH_URL"),  # Get MeiliSearch URL from .env
    os.getenv("MEILI_SEARCH_MASTER_KEY")  # Get MeiliSearch master key from .env
)

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize MeiliSearch client
try:
    meili_client = Client('http://meilisearch:7700', 'masterKey')
    logger.info("MeiliSearch client initialized successfully.")
except Exception as e:
    logger.error(f"Failed to initialize MeiliSearch client: {e}")
    raise


# Add documents to MeiliSearch
def add_documents(index_name, documents):
    index = meili_client.index(index_name)
    task_info = index.add_documents(documents)
    return task_info


# Define search function
def search(index_name, query):
    try:
        index = meili_client.index(index_name)
        if not index:
            raise ValueError(f"Index '{index_name}' does not exist")
        result = index.search(query)
        return result
    except Exception as e:
        logger.error(f"Error in search function: {e}")
        raise


# Define routes

# Handle file upload
async def upload_file(request: Request):
    try:
        # Parse the uploaded file
        form_data = await request.form()
        file = form_data["file"]
        content = await file.read()
        # print statement for debugging
        print("Uploaded file content:", content)
        documents = json.loads(content)

        # Add documents to the index
        task_info = add_documents("ossfinder", documents)

        # Return the task info
        return JSONResponse({
            "status": task_info.status,
            "taskUid": task_info.task_uid,
            "indexUid": task_info.index_uid,
            "type": task_info.type,
            "enqueuedAt": task_info.enqueued_at.isoformat() if task_info.enqueued_at else None,
        })
    except Exception as e:
        return JSONResponse({"error": str(e)}, status_code=500)


async def add(request):
    try:
        # Parse request data
        data = await request.json()
        index_name = data.get('index_name')
        documents = data.get('documents')

        # Validate request data
        if not index_name or not documents:
            return JSONResponse(
                {"error": "index_name and documents are required"},
                status_code=400,
            )

        # Add documents to MeiliSearch
        index = meili_client.index(index_name)
        task_info = index.add_documents(documents)

        # Convert datetime to string
        enqueued_at_str = task_info.enqueued_at.isoformat() if task_info.enqueued_at else None

        # Extract relevant data from TaskInfo object
        response_data = {
            "status": task_info.status,
            "taskUid": task_info.task_uid,
            "indexUid": task_info.index_uid,
            "type": task_info.type,
            "enqueuedAt": enqueued_at_str,  # Use the string representation
        }

        return JSONResponse(response_data)

    except Exception as e:
        logger.error(f"Error in /add endpoint: {e}")
        return JSONResponse(
            {"error": "Internal Server Error", "details": str(e)},
            status_code=500,
        )


async def search_docs(request):
    try:
        # Get query parameters
        index_name = request.query_params.get('index_name')
        query = request.query_params.get('query')

        # Validate query parameters
        if not index_name or not query:
            return JSONResponse(
                {"error": "index_name and query are required"},
                status_code=400,
            )

        # Perform search
        result = search(index_name, query)

        # Return search results
        return JSONResponse(result)

    except Exception as e:
        logger.error(f"Error in /search endpoint: {e}")
        return JSONResponse(
            {"error": "Internal Server Error", "details": str(e)},
            status_code=500,
        )


# noinspection PyUnusedLocal
async def homepage(request):
    return PlainTextResponse("Welcome to the Backend!")


# noinspection PyUnusedLocal
async def health(request):
    return JSONResponse({"status": "ok"})


# Create a Router
routes = [
    Route("/", homepage, methods=["GET"]),  # Homepage route
    Route("/upload", upload_file, methods=["POST"]),
    Route("/add", add, methods=["POST"]),
    Route("/search", search_docs, methods=["GET"]),
    Route("/health", health, methods=["GET"]),
]


# Initialize the app
app = Starlette(routes=routes)


# Add CORS middleware
# noinspection PyTypeChecker
app.add_middleware(
    CORSMiddleware,  # Pass the class, not an instance
    allow_origins=["http://127.0.0.1:8001"],  # Allow requests from the frontend
    allow_methods=["*"],  # Allow all HTTP methods
    allow_headers=["*"],  # Allow all headers
)


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8000)
